{"version":3,"sources":["serviceWorker.js","components/RoboCard.js","components/RoboCardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","useStyles","makeStyles","root","maxWidth","RoboCard","name","email","id","classes","Card","className","CardActionArea","CardMedia","component","height","image","title","CardContent","Typography","align","gutterBottom","variant","color","RoboCardList","robots","Grid","container","alignContent","alignItems","justify","spacing","map","user","i","item","key","SearchBox","searchChange","TextField","margin","onChange","placeholder","size","Scroll","props","style","overflow","border","children","ErrorBoundry","state","hasError","error","info","this","Component","App","onSearchChange","event","setState","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","textAlign","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"0OAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oFCVAC,EAAYC,YAAW,CAC3BC,KAAM,CACJC,SAAU,OAIC,SAASC,EAAT,GAAoC,IAAjBC,EAAgB,EAAhBA,KAAKC,EAAW,EAAXA,MAAMC,EAAK,EAALA,GACrCC,EAAUR,IAChB,OACE,kBAACS,EAAA,EAAD,CAAMC,UAAWF,EAAQN,MACvB,kBAACS,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,UAAU,MACVC,OAAO,MACPC,MAAK,+BAA0BR,EAA1B,YACLS,MAAK,wBAAmBX,KAE1B,kBAACY,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAM,SAASC,cAAY,EAACC,QAAQ,KAAKR,UAAU,MAC5DR,GAEH,kBAACa,EAAA,EAAD,CAAYC,MAAM,SAASE,QAAQ,QAAQC,MAAM,gBAAgBT,UAAU,KACxEP,M,YC1BE,SAASiB,EAAT,GAAmC,IAAXC,EAAU,EAAVA,OACrC,OACE,kBAACC,EAAA,EAAD,CACEC,WAAS,EACTC,aAAa,eACbC,WAAW,SACXC,QAAQ,eACRC,QAAS,GAERN,EAAOO,KAAI,SAACC,EAAMC,GACjB,OACE,kBAAC7B,EAAD,CACE8B,MAAI,EACJC,IAAKH,EAAKzB,GACVA,GAAIiB,EAAOS,GAAG1B,GACdF,KAAMmB,EAAOS,GAAG5B,KAChBC,MAAOkB,EAAOS,GAAG3B,Y,YCjBd,SAAS8B,EAAT,GAAsC,IAAjBC,EAAgB,EAAhBA,aAClC,OACE,kBAACC,EAAA,EAAD,CACEC,OAAO,SACPC,SAAUH,EACVI,YAAY,uBACZC,KAAK,SACLrB,QAAQ,a,MCRC,SAASsB,EAAOC,GAC3B,OACI,yBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAO,OAAQjC,OAAO,UACnD8B,EAAMI,U,ICeJC,E,kDAjBb,WAAYL,GAAQ,IAAD,8BACjB,cAAMA,IACDM,MAAQ,CACXC,UAAU,GAHK,E,8DAODC,EAAMC,GACtBC,KAAKJ,MAAM,CAACC,UAAS,M,+BAIrB,OAAIG,KAAKJ,MAAMC,SAAiB,6DACzBG,KAAKV,MAAMI,a,GAdKO,aCgDZC,E,kDA1Cb,aAAe,IAAD,8BACZ,gBAaFC,eAAiB,SAAAC,GACf,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAb1C,EAAKZ,MAAQ,CACX1B,OAAQ,GACRoC,YAAa,IAJH,E,gEAQO,IAAD,OAClBG,MAAM,6CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAAEnC,OAAQ2C,S,+BAOjC,IAAD,EACyBb,KAAKJ,MAA7B1B,EADD,EACCA,OAAQoC,EADT,EACSA,YACVQ,EAAiB5C,EAAO6C,QAAO,SAAAC,GACnC,OAAOA,EAAMjE,KAAKkE,cAAcC,SAASZ,EAAYW,kBAEvD,OAAQ/C,EAAOiD,OAGb,6BACE,yBAAK5B,MAAO,CAAE6B,UAAW,WACvB,2CACA,kBAACtC,EAAD,CAAWC,aAAciB,KAAKG,kBAGhC,kBAACd,EAAD,KACE,kBAAC,EAAD,KACE,kBAACpB,EAAD,CAAcC,OAAQ4C,OAV5B,8C,GAzBYb,aCDlBoB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SPyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAjC,GACLkC,QAAQlC,MAAMA,EAAMmC,c","file":"static/js/main.35b80ba7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    maxWidth: 400,\r\n  }\r\n});\r\n\r\nexport default function RoboCard({name,email,id}) {\r\n  const classes = useStyles();\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardActionArea>\r\n        <CardMedia\r\n          component=\"img\"\r\n          height=\"300\"\r\n          image={`https://robohash.org/${id}?200x200`}\r\n          title={`a robot named ${name}`}\r\n        />\r\n        <CardContent>\r\n          <Typography align='center' gutterBottom variant=\"h5\" component=\"h2\">\r\n            {name}\r\n          </Typography>\r\n          <Typography align='center' variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n            {email}\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n    </Card>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport RoboCard from \"./RoboCard\";\r\nimport { Grid } from '@material-ui/core';\r\n\r\nexport default function RoboCardList({ robots }) {\r\n  return (\r\n    <Grid\r\n      container\r\n      alignContent='space-around'\r\n      alignItems='center'\r\n      justify='space-around'\r\n      spacing={2}\r\n    >\r\n      {robots.map((user, i) => {\r\n        return (\r\n          <RoboCard\r\n            item\r\n            key={user.id}\r\n            id={robots[i].id}\r\n            name={robots[i].name}\r\n            email={robots[i].email}\r\n          />\r\n        );\r\n      })}\r\n    </Grid>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { TextField } from \"@material-ui/core\";\r\n\r\nexport default function SearchBox({ searchChange }) {\r\n  return (\r\n    <TextField\r\n      margin=\"normal\"\r\n      onChange={searchChange}\r\n      placeholder=\"Search for robots...\"\r\n      size=\"medium\"\r\n      variant=\"outlined\"\r\n    />\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Scroll(props){\r\n    return (\r\n        <div style={{ overflow: 'scroll', border:'none', height:'800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error,info){\r\n    this.state({hasError:true});\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) return <h1>Something went wrong... oops!</h1>;\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React, { Component } from \"react\";\r\nimport RoboCardList from \"../components/RoboCardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport \"./App.css\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundry from \"../components/ErrorBoundry\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robots: [],\r\n      searchfield: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"http://jsonplaceholder.typicode.com/users\")\r\n      .then(response => response.json())\r\n      .then(users => this.setState({ robots: users }));\r\n  }\r\n\r\n  onSearchChange = event => {\r\n    this.setState({ searchfield: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    const { robots, searchfield } = this.state;\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n    });\r\n    return !robots.length ? (\r\n      <h1>Loading...</h1>\r\n    ) : (\r\n      <div>\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <h1>Gangstabots</h1>\r\n          <SearchBox searchChange={this.onSearchChange} />\r\n        </div>\r\n\r\n        <Scroll>\r\n          <ErrorBoundry>\r\n            <RoboCardList robots={filteredRobots} />\r\n          </ErrorBoundry>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport App from './containers/App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}